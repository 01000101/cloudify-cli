#!/usr/bin/env python
"""
WordAPI.py
Copyright 2012 Wordnik, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os

from models import *


class BlueprintsApi(object):

    def __init__(self, apiClient):
        self.apiClient = apiClient


    def upload(self, body, application_file_name, **kwargs):
        """Upload a new blueprint to Cloudify

        Args:
            body, file: application archive (required)
            application_file_name, str: application file name (required)
            
        Returns: BlueprintState
        """

        allParams = ['body', 'application_file_name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method upload" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/blueprints'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('application_file_name' in params):
            queryParams['application_file_name'] = self.apiClient.toPathValue(params['application_file_name'])
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, True)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'BlueprintState')
        return responseObject


    def list(self, **kwargs):
        """Lists all blueprints

        Args:
            
        Returns: array[BlueprintState]
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method list" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/blueprints'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'array[BlueprintState]')
        return responseObject


    def run(self, id, body, deploymentId, **kwargs):
        """Run a blueprint

        Args:
            id, str: ID of the blueprint to run (required)
            body, str: json data to send to the server (required)
            deploymentId, str: ID of the deployment, if empty then create a new one (required)

        Returns: Execution
        """

        allParams = ['id', 'body', 'deploymentId']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method run" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/blueprints/{id}/executions'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}

        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        if ('deploymentId' in params):
            replacement = str(self.apiClient.toPathValue(params['deploymentId']))
            resourcePath = resourcePath.replace('{' + 'deploymentId' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'Execution')
        return responseObject


    def list_deployments(self, id, **kwargs):
        """Get a list of all deployments of this blueprint

        Args:
            id, str: ID of blueprint that needs to be fetched (required)
            
        Returns: array[Deployment]
        """

        allParams = ['id']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method list_deployments" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/blueprints/{id}/deployments'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}

        if ('id' in params):
            replacement = str(self.apiClient.toPathValue(params['id']))
            resourcePath = resourcePath.replace('{' + 'id' + '}',
                                                replacement)
        postData = (params['body'] if 'body' in params else None)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams)

        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'array[Deployment]')
        return responseObject
        
        
    


